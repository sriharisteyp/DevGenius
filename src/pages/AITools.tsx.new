import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import styles from './AITools.module.css';
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useState, useEffect } from "react";
import Navigation from "@/components/Navigation";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/hooks/useAuth";
import {
  Code,
  Bug,
  RefreshCw,
  FileText,
  Languages,
  Brain,
  BookOpen,
  Wrench,
  Globe,
  MessageCircle,
  CheckSquare,
  Bolt,
  Database,
  Filter,
  Server,
  Loader2,
  AlertCircle,
  Copy,
  Check
} from "lucide-react";
import { callGeminiApi } from "@/utils/geminiApi";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const MONTHLY_CREDIT_LIMIT = 150; // Monthly credit limit per user

const AITools = () => {
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  const [activeTool, setActiveTool] = useState("codeGen");
  const [prompt, setPrompt] = useState("");
  const [result, setResult] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  const [showUsageLimitAlert, setShowUsageLimitAlert] = useState(false);
  const [credits, setCredits] = useState({ used: 0, total: MONTHLY_CREDIT_LIMIT });
  const { toast } = useToast();

  // Load credits from localStorage
  useEffect(() => {
    if (!isAuthenticated || !user?.id) {
      navigate("/login", { state: { message: "Please log in to access AI Tools" } });
      return;
    }

    const loadLocalCredits = () => {
      const storageKey = `aitools_credits_${user.id}`;
      const now = new Date();
      const storedCredits = localStorage.getItem(storageKey);

      if (storedCredits) {
        const { used = 0, lastResetDate } = JSON.parse(storedCredits);
        const lastReset = new Date(lastResetDate);

        // Reset credits if it's a new month
        if (lastReset.getMonth() !== now.getMonth() || lastReset.getFullYear() !== now.getFullYear()) {
          const newData = { used: 0, lastResetDate: now.toISOString() };
          localStorage.setItem(storageKey, JSON.stringify(newData));
          setCredits({ used: 0, total: MONTHLY_CREDIT_LIMIT });
        } else {
          setCredits({ used, total: MONTHLY_CREDIT_LIMIT });
        }
      } else {
        // Initialize for new users
        const newData = { used: 0, lastResetDate: now.toISOString() };
        localStorage.setItem(storageKey, JSON.stringify(newData));
        setCredits({ used: 0, total: MONTHLY_CREDIT_LIMIT });
      }
    };

    loadLocalCredits();
  }, [isAuthenticated, user, navigate]);

  const updateCredits = () => {
    if (!user?.id) return;
    
    const storageKey = `aitools_credits_${user.id}`;
    const newUsed = credits.used + 1;
    const newData = {
      used: newUsed,
      lastResetDate: new Date().toISOString()
    };
    
    localStorage.setItem(storageKey, JSON.stringify(newData));
    setCredits(prev => ({ ...prev, used: newUsed }));
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Input Required",
        description: "Please enter a prompt to generate content.",
        variant: "destructive",
      });
      return;
    }

    if (credits.used >= credits.total) {
      toast({
        title: "Credit Limit Reached",
        description: "You've reached your monthly credit limit. Please try again next month.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setResult("");
    setIsCopied(false);
    
    try {
      const generationConfig = activeTool === 'codeGen' ? {
        temperature: 0.7,
        topP: 0.9,
        maxOutputTokens: 2048,
      } : {};
      
      const response = await callGeminiApi({
        contents: [{
          role: "user",
          parts: [{ text: aiTools.find(t => t.id === activeTool)?.systemPrompt || "" }]
        }, {
          role: "model",
          parts: [{ text: "I understand. I will help you with that." }]
        }, {
          role: "user",
          parts: [{ text: prompt }]
        }],
        generationConfig
      });

      setResult(response.text);
      updateCredits(); // Update credits after successful generation
    } catch (error) {
      console.error('Error generating content:', error);
      toast({
        title: "Generation Failed",
        description: error instanceof Error ? error.message : "Failed to generate content",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(result);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  // If not authenticated, don't render the content
  if (!isAuthenticated) {
    return null;
  }

  const aiTools = [
    {
      id: "codeGen",
      name: "Code Generator",
      icon: Code,
      description: "Generate code from natural language descriptions",
      color: "green",
      placeholder: "Describe the code you want to generate (e.g., 'Create a React login form component')",
      systemPrompt: "You are a code generator. Generate clean, well-commented code based on the user's description. Include proper TypeScript types and follow best practices."
    },
    {
      id: "bugDetector",
      name: "Bug Detector",
      icon: Bug,
      description: "Identify potential bugs and security vulnerabilities",
      color: "red",
      placeholder: "Paste your code here to detect potential bugs and issues",
      systemPrompt: "You are a bug detector. Analyze the provided code and identify potential bugs, security vulnerabilities, performance issues, and suggest fixes."
    },
    {
      id: "refactor",
      name: "Code Refactor",
      icon: RefreshCw,
      description: "Optimize and improve existing code",
      color: "blue",
      placeholder: "Paste the code you want to refactor and optimize",
      systemPrompt: "You are a code refactoring expert. Improve the provided code for better performance, readability, maintainability, and best practices."
    },
    {
      id: "docGen",
      name: "Documentation Generator",
      icon: FileText,
      description: "Generate comprehensive documentation",
      color: "purple",
      placeholder: "Paste your code or describe what you need documentation for",
      systemPrompt: "You are a documentation generator. Create comprehensive, clear documentation including usage examples, parameters, and explanations."
    }
  ];

  return (
    <div className="min-h-screen bg-background pt-16">
      <Navigation />
      
      {/* Credits Display */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-6">
        <Card className="bg-card/30 backdrop-blur-sm border-green-500/30">
          <CardContent className="py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Bolt className="w-5 h-5 text-green-500" />
                <span className="text-white">Credits Usage</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-green-400">{credits.used}</span>
                <span className="text-gray-400">/</span>
                <span className="text-white">{credits.total}</span>
                <span className="text-gray-400 text-sm ml-1">credits used</span>
              </div>
              <div className="w-1/2 h-2 bg-gray-700 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-green-500 rounded-full transition-all duration-300"
                  style={{ width: `${(credits.used / credits.total) * 100}%` }}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Tools Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          {aiTools.map((tool) => (
            <Card
              key={tool.id}
              className={`bg-card/30 backdrop-blur-sm border-${tool.color}-500/30 cursor-pointer transition-all hover:bg-card/40 ${
                activeTool === tool.id ? `ring-2 ring-${tool.color}-500` : ""
              }`}
              onClick={() => setActiveTool(tool.id)}
            >
              <CardContent className="p-6">
                <div className="flex items-center space-x-3 mb-3">
                  <div className={`p-2 rounded-lg bg-${tool.color}-500/10`}>
                    <tool.icon className={`w-6 h-6 text-${tool.color}-500`} />
                  </div>
                  <h3 className="text-lg font-semibold text-white">{tool.name}</h3>
                </div>
                <p className="text-gray-400 text-sm">{tool.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Input/Output Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {/* Input */}
          <Card className="bg-card/30 backdrop-blur-sm border-green-500/30">
            <CardHeader>
              <CardTitle className="text-white text-xl">Input</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder={aiTools.find((t) => t.id === activeTool)?.placeholder}
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                className="min-h-[200px] bg-background/50 border-gray-800 text-white placeholder-gray-400"
              />
              <Button
                onClick={handleGenerate}
                disabled={isLoading || !prompt.trim()}
                className="w-full mt-4 bg-green-600 hover:bg-green-700 text-white"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  "Generate"
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Output */}
          <Card className="bg-card/30 backdrop-blur-sm border-green-500/30">
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle className="text-white text-xl">Output</CardTitle>
              {result && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleCopy}
                  className="text-gray-400 hover:text-white"
                >
                  {isCopied ? (
                    <Check className="w-4 h-4" />
                  ) : (
                    <Copy className="w-4 h-4" />
                  )}
                </Button>
              )}
            </CardHeader>
            <CardContent>
              <div className="min-h-[200px] p-4 bg-background/50 rounded-lg border border-gray-800 text-white font-mono whitespace-pre-wrap">
                {result || "Generated content will appear here..."}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AITools;
